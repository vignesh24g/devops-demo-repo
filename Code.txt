g
import boto3
import random
from faker import Faker
import yaml
import datetime

fake = Faker()

# Step 1: Extract Table Schemas
def get_table_schemas(database_name, table_names):
    client = boto3.client('glue')
    schema_dict = {}
    for table_name in table_names:
        response = client.get_table(DatabaseName=database_name, Name=table_name)
        schema_dict[table_name] = response['Table']['StorageDescriptor']['Columns']
    return schema_dict

# Step 2: Generate Sample Data
def generate_value(col_type):
    if col_type == 'string':
        return fake.word()
    elif col_type == 'int':
        return random.randint(1, 100)
    elif col_type == 'double':
        return random.uniform(1.0, 100.0)
    elif col_type == 'boolean':
        return random.choice([True, False])
    elif col_type == 'date':
        return fake.date()
    elif col_type == 'timestamp':
        return fake.date_time()
    elif col_type == 'binary':
        return fake.binary(length=10)
    elif col_type.startswith('array'):
        sub_type = col_type[6:-1]  # Extract the subtype
        return [generate_value(sub_type) for _ in range(random.randint(1, 5))]
    elif col_type.startswith('map'):
        key_type, value_type = col_type[4:-1].split(', ')
        return {generate_value(key_type): generate_value(value_type) for _ in range(random.randint(1, 5))}
    elif col_type.startswith('struct'):
        fields = col_type[7:-1].split(', ')
        return {field.split(':')[0]: generate_value(field.split(':')[1]) for field in fields}
    # Add more types as needed
    return None

def generate_sample_data(schema, num_records=100, predefined_values=None):
    data = []
    for _ in range(num_records):
        record = {}
        for column in schema:
            col_name = column['Name']
            col_type = column['Type']
            if predefined_values and col_name in predefined_values:
                record[col_name] = random.choice(predefined_values[col_name])
            else:
                record[col_name] = generate_value(col_type)
        data.append(record)
    return data

# Step 3: Ensure Referential Integrity
def ensure_referential_integrity(data, join_conditions):
    for condition in join_conditions:
        table1, column1, table2, column2 = condition
        for record1 in data[table1]:
            record2 = random.choice(data[table2])
            record1[column1] = record2[column2]
    return data

# Step 4: Apply Filter Conditions
def apply_filter_conditions(data, filter_conditions):
    for condition in filter_conditions:
        table = condition['table']
        column = condition['column']
        value = condition['value']
        for record in data[table]:
            record[column] = value
    return data

# Step 5: Framework Structure
class DataGenerator:
    def __init__(self, config_path):
        self.config = self.load_config(config_path)
        self.schemas = {}
        self.data = {}

    def load_config(self, path):
        with open(path, 'r') as file:
            return yaml.safe_load(file)
    
    def extract_schemas(self, database_name):
        table_names = [table['name'] for table in self.config['tables']]
        self.schemas = get_table_schemas(database_name, table_names)

    def generate_data(self):
        predefined_values = self.config.get('predefined_values', {})
        for table_config in self.config['tables']:
            table_name = table_config['name']
            num_records = table_config['num_records']
            schema = self.schemas.get(table_name)
            if schema:
                self.data[table_name] = generate_sample_data(
                    schema,
                    num_records,
                    predefined_values.get(table_name, {})
                )
    
    def apply_referential_integrity(self):
        join_conditions = self.config['join_conditions']
        self.data = ensure_referential_integrity(self.data, join_conditions)

    def apply_filter_conditions(self):
        filter_conditions = self.config['filter_conditions']
        self.data = apply_filter_conditions(self.data, filter_conditions)

    def get_data(self):
        return self.data

    def print_data(self):
        for table, records in self.data.items():
            print(f"Data for table {table}:")
            for record in records:
                print(record)
            print("\n")

# Usage
if __name__ == "__main__":
    generator = DataGenerator('config.yaml')
    generator.extract_schemas('your_database_name')
    generator.generate_data()
    generator.apply_referential_integrity()
    generator.apply_filter_conditions()
    generator.print_data()
